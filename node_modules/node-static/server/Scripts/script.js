var
  offers = [],
  user = {
    fullname: 'Гость',
    avatar: '../../../images/users/anonymous.png'
  };

$('.login .button').on('click', function () {
  getLoggedUser($('.login .field-text').val());
})

getOffers();

function getOffers() {
  $.ajax({
    method: 'GET',
    url: '/offers.json',
    dataType: 'json',
    cache: false,
    success: function(data) {
      $.each(data,
        function() {
          offers = data.slice();
        });
      renderShortOffers();
    }
  });
}

function offerRefresh() {
  $.ajax({
    method: 'POST',
    url: '/refresh',
    data: JSON.stringify(offers),
    dataType: 'json',
    success: function(data) {
      try {
        offers = data.slice();
      } catch (e) {
        offerRefresh();
      }
    }
  });
}

function getLoggedUser(id) {
  $.ajax({
    method: 'POST',
    url: '/get-user',
    data: id,
    dataType: 'json',
    success: function (data) {
      user = data;
      renderTemplate('#user-plate-templ', '.login-wrap .author', user);
      renderShortOffers();
    }
  });
};
Array.prototype.last = function () {
  return this[this.length - 1];
}

var removedObjects = [{
  offers: [],
  comments: [],
  answers: []
}];

function offerActionHandler(e) {
  var
    $target = $(e.target),
    button = $target.attr('data-button') || $target.parents('[data-button]').attr('data-button'),
    offer = new Offer(this);

  switch (button) {
    case 'like':
      offer.like();
      break;
    case 'save':
      offer.save();
      break;
    case 'viewComment':
      offer.viewComment($target);
      break;
    case 'openOfferLightbox':
      offer.openOfferLightbox();
      break;
    case 'closeOfferLightbox':
      offer.closeOfferLightbox();
      break;
    case 'removeComment':
      offer.removeComment($target.parents('.author'));
      break;
    case 'removeAnswer':
      offer.removeAnswer($target.parents('.author'));
      break;
    case 'removeOffer':
      offer.removeOffer();
      break;
  }
}

function commentingHandler(e) {
  if (((e.keyCode == 13 || e.which == 13) && !e.shiftKey) && this.value) {
    if ($(this).hasClass('js-comment')) {
      new Offer($(this).parents('.offer-plate')).addComment(this.value);
    }
    if ($(this).hasClass('js-answer')) {
      new Offer($(this).parents('.lightbox.offer')).addAnswer(this.value);
    }
    $(this).val('');
    e.preventDefault();
  }
}

function Offer(self) {
  var
    $offer = $(self),
    dataId = $offer.attr('data-id'),
    offerId;

  $.each(offers, function (i) {
    if (this.id == dataId) {
      offerId = i;
    }
  })

  this.like = function () {
    countActions('likes');
    socialActionRefresh();
  }

  this.save = function () {
    countActions('saved');
    socialActionRefresh();
  }

  this.viewComment = function ($target) {
    $offer.find('.comments').toggleClass('hidden');
    $target.toggleClass('active');
  }

  this.openOfferLightbox = function () {
    $('body').addClass('lock');
    $('.lightbox-wrap').removeClass('hidden');
    renderOffer(dataId);
  }

  this.closeOfferLightbox = function () {
    $('body').removeClass('lock');
    $('.lightbox-wrap').addClass('hidden');
  }

  this.addComment = function (comment) {
    addMessage('comments', comment);
    offerRefresh();
    renderTemplate('#social-info-templ', '.offer-plate[data-id="' + dataId + '"] .social-info', offers[offerId]);
    renderTemplate('#latest-comments-templ', '.offer-plate[data-id="' + dataId + '"] .latest-comments',
        offers[offerId]);
  }

  this.addAnswer = function (answer) {
    addMessage('answers', answer);
    offerRefresh();
    renderTemplate('#social-info-templ', '.offer-plate[data-id="' + dataId + '"] .social-info', offers[offerId]);
    renderTemplate('#latest-answers-templ', '.lightbox.offer[data-id="' + dataId + '"] .latest-comments', offers[offerId]);
  }

  this.removeComment = function ($commentElem) {
    removeMessage('comments', $commentElem);
    renderTemplate('#social-info-templ', '.offer-plate[data-id="' + dataId + '"] .social-info', offers[offerId]);
    renderTemplate('#latest-comments-templ', '.offer-plate[data-id="' + dataId + '"] .latest-comments',
        offers[offerId]);
  }

  this.removeAnswer = function ($answerElem) {
    removeMessage('answers', $answerElem);
    renderTemplate('#social-info-templ', '.offer-plate[data-id="' + dataId + '"] .social-info', offers[offerId]);
    renderTemplate('#latest-answers-templ', '.lightbox.offer[data-id="' + dataId + '"] .latest-comments', offers[offerId]);
  }

  this.removeOffer = function () {
    $.each(offers, function (i) {
      if (this.id == dataId) {
        removedObjects[0].offers.push(this);
        offers.splice(i, 1);
        return false;
      }
    })

    this.closeOfferLightbox();
    $('.offer-plate[data-id="' + dataId + '"]').remove();
    offerRefresh();
  }

  function countActions(subject) {
    var hasAction = false;

    $.each(offers[offerId][subject][0].fromUsers, function (i) {
      if (this.userId == user.id) {
        hasAction = true;
        offers[offerId][subject][0].count -= 1;
        offers[offerId][subject][0].fromUsers.splice(i, 1);
        return false;
      }
    });

    if (!hasAction) {
      offers[offerId][subject][0].count += 1;
      obj = {
        userId: user.id,
        avatar: user.avatar
      }
      offers[offerId][subject][0].fromUsers.push(obj);
    }
  }

  function addMessage(subject, message) {
    var currentId;

    if (!offers[offerId][subject][0].count) {
      currentId = 0
    } else {
      currentId = offers[offerId][subject][0].fromUsers.last().id + 1;
    }

    obj = {
      id: currentId,
      userId: user.id,
      avatar: user.avatar,
      comment: message
    }

    offers[offerId][subject][0].count += 1;
    offers[offerId][subject][0].fromUsers.push(obj);
  }

  function removeMessage(subject, $messageElem) {
    var
        comments = offers[offerId][subject][0].fromUsers,
        commentId = $messageElem.attr('data-id');

    $.each(comments, function (i) {
      if (this.id == commentId) {
        removedObjects[0][subject].push(this);
        offers[offerId][subject][0].count -= 1;
        comments.splice(i, 1);
        return false;
      }
    })

    $messageElem.remove();
    offerRefresh();
  }

  function socialActionRefresh() {
    offerRefresh();
    renderTemplate('#social-buttons-templ', '.offer-plate[data-id="' + dataId + '"] .social-actions', offers[offerId]);
    renderTemplate('#social-info-templ', '.offer-plate[data-id="' + dataId + '"] .social-info', offers[offerId]);
    renderTemplate('#lightbox-social-info-templ', '.lightbox.offer[data-id="' + dataId + '"] .lightbox-footer', offers[offerId]);
    renderTemplate('#lightbox-social-buttons-templ', '.lightbox.offer[data-id="' + dataId + '"] .social-actions', offers[offerId]);
  }
}
Handlebars.registerHelper('renderLatestMessages', function (context, subject, options) {

  if (subject == 'comments') {
    return latestMessagesHelper(context, options, 5, 40);
  }

  if (subject == 'answers') {
    return latestMessagesHelper(context, options, 3);
  }
});

Handlebars.registerHelper('renderCloseElement', function (context, options) {
  if (context && context == user.id) {
    return options.fn(context)
  }
});

Handlebars.registerHelper('like', function (context, options) {
  return addClassHelper(context, options, 'liked', 'active');
});

Handlebars.registerHelper('save', function (context, options) {
  return addClassHelper(context, options, 'saved', 'active');
});

Handlebars.registerHelper('renderButtonRemoveOffer', function (context, options) {
  return addClassHelper(context, options, 'hidden', 'hidden', true);
});

Handlebars.registerHelper('renderCountActions', function (context, options) {
  if (context != 0) {
    return options.fn(context);
  };
});

function latestMessagesHelper(context, options, countMessage, messageLength) {
  var
    ret = '',
    i,
    comment;

  if (context.length < countMessage) {
    i = 0;
  } else {
    i = context.length - countMessage;
  };

  for (; i < context.length; i++) {
    comment = context[i].comment;

    if (messageLength && context[i].comment.length > messageLength) {
      context[i].comment = context[i].comment.slice(0, messageLength) + '...';
    };

    ret += options.fn(context[i]);
    context[i].comment = comment;
  };

  return ret;
};

function addClassHelper(context, options, elem, className, inverse) {
  var
    ret,
    i;

  $.each(context, function () {
    if (inverse && this.userId != user.id) {
      context[elem] = className;
    }
    if (!inverse && this.userId == user.id) {
      context[elem] = className;
    }
  });

  ret = options.fn(context)
  delete context[elem];

  return ret;
};
function renderOffer(id) {
  var template = Handlebars.compile($('#offer-templ').html());

  $.each(offers, function () {
    if (this.id == id) {
      $('.lightbox-wrap').html(template(this));
    }
  });

  renderInputMessage('answer');
  $('.lightbox.offer').on('click', offerActionHandler);
  $('.js-answer').on('keypress', commentingHandler);
}

function renderShortOffers() {
  var
    template,
    columns = $('.column'),
    index = 0,
    currentOfferId;

  template = Handlebars.compile($('#offer-plate-templ').html());

  $.each(columns, function () {
    $(this).html('');
  });

  while (index < offers.length) {
    $.each(columns, function () {
      var
        $currentImg,
        $imgContainer;

      $(this).append(template(offers[index]));
      $currentImg = $(this).find('.offer-img').last();
      $imgContainer = $currentImg.parent();
      currentOfferId = offers[index].id;

      if ($currentImg.width() > 0 && $currentImg.width() < $imgContainer.width()) {
        $currentImg.addClass('small');
      }

      index += 1;

      if (index >= offers.length) return false;
    });
  }

  renderInputMessage('comment');
  $('.offer-plate').on('click', offerActionHandler);
  $('.js-comment').on('keypress', commentingHandler);
}

function renderInputMessage(subject) {
  var
    template,
    sourceSelector,
    containerSelector;

  switch (subject) {
    case 'comment':
      sourceSelector = '#add-comment-templ';
      containerSelector = '.add-comment';
      break;
    case 'answer':
      sourceSelector = '#add-answer-templ';
      containerSelector = '.add-answer';
      break;
    default:
      return false;
  }

  template = Handlebars.compile($(sourceSelector).html());
  $(containerSelector).append(template(user));
}

function renderTemplate(templateSelector, containerSelector, obj) {
  var template;

  template = Handlebars.compile($(templateSelector).html());
  $(containerSelector).html(template(obj));
};