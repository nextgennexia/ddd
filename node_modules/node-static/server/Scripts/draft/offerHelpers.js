Handlebars.registerHelper('ifCond', function (v1, operator, v2, options) {

  switch (operator) {
    case '!=':
      return (v1 != v2) ? options.fn(this) : options.inverse(this);
    case '==':
      return (v1 == v2) ? options.fn(this) : options.inverse(this);
    case '===':
      return (v1 === v2) ? options.fn(this) : options.inverse(this);
    case '<':
      return (v1 < v2) ? options.fn(this) : options.inverse(this);
    case '<=':
      return (v1 <= v2) ? options.fn(this) : options.inverse(this);
    case '>':
      return (v1 > v2) ? options.fn(this) : options.inverse(this);
    case '>=':
      return (v1 >= v2) ? options.fn(this) : options.inverse(this);
    case '&&':
      return (v1 && v2) ? options.fn(this) : options.inverse(this);
    case '||':
      return (v1 || v2) ? options.fn(this) : options.inverse(this);
    default:
      return options.inverse(this);
  }
});

Handlebars.registerHelper('renderLatestMessages', function (context, countMessage, messageLength, options) {
  var
      ret = '',
      i = 0,
      comment,
      lastId = context.length - 1;

  for (i; i < countMessage; i++) {
    if (context[lastId]) {
      if (context[lastId].removed) {
        lastId--;
        i--;
        continue;
      }
      comment = context[lastId].comment;

      if (messageLength && context[lastId].comment.length > messageLength) {
        context[lastId].comment = context[lastId].comment.slice(0, messageLength) + '...';
      }

      ret = options.fn(context[lastId]) + ret;
      context[lastId].comment = comment;
      lastId--;
    }
  }

  return ret;
});